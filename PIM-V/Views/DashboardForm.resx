<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>